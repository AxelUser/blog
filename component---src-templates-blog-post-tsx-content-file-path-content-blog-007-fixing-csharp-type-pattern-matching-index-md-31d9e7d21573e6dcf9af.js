"use strict";(self.webpackChunkmaltsev_space=self.webpackChunkmaltsev_space||[]).push([[264],{6753:function(n,a,s){s.d(a,{nC:function(){return e},$y:function(){return t},fL:function(){return l}});s(358);var e="_14sfvu70",t="_14sfvu72",l="_14sfvu71"},5775:function(n,a,s){s.r(a),s.d(a,{Head:function(){return m},default:function(){return g}});var e=s(1151),t=s(7294);function l(n){const a=Object.assign({p:"p",h2:"h2",a:"a",span:"span",strong:"strong"},(0,e.ah)(),n.components);return t.createElement(t.Fragment,null,t.createElement(a.p,null,"Hello there! Are you looking for ways to make your code more robust, maintainable, and less prone to runtime errors? Well, buckle up because today we're going to explore how to substitute type pattern matching in C# with the Visitors pattern. Yes, I know it sounds a bit strange, but stick with me, and you'll see how this can help you write better code."),"\n",t.createElement(a.h2,{id:"task-example-validation-of-property-values",style:{position:"relative"}},t.createElement(a.a,{href:"#task-example-validation-of-property-values","aria-label":"task example validation of property values permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Task example: Validation of property values"),"\n",t.createElement(a.p,null,"So let's start with an example. Imagine we have a marker interface for some property value - ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">IValue</code>'}}),". It has two implementations - ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">StringValue</code>'}})," and ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">NumericValue</code>'}}),", holding ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">string</code>'}})," and ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">long</code>'}})," values respectively."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="csharp"><pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IValue</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">record</span> <span class="token class-name">StringValue</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> Value<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IValue</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">record</span> <span class="token class-name">NumericValue</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">long</span></span> Value<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IValue</span></span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"As an example, let's implement validation of those values. We write a static helper function ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">IsValid</code>'}}),", which accepts ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">IValue</code>'}})," and returns a boolean value: ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">true</code>'}})," if the value is valid, ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">false</code>'}})," otherwise. We do it in a straightforward way - just make a ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">switch</code>'}})," expression with branches for ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">StringValue</code>'}})," and ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">NumericValue</code>'}})," types. But for our ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">switch</code>'}})," to be exhaustive, we're forced to make a default branch with throwing ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">UnreachableException</code>'}}),"."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="csharp"><pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ValidationHelper</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token class-name">IValue</span> <span class="token keyword">value</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">value</span> <span class="token keyword">switch</span>\n        <span class="token punctuation">{</span>\n            <span class="token return-type class-name">StringValue</span> stringValue <span class="token operator">=></span> <span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token return-type class-name">NumericValue</span> numericValue <span class="token operator">=></span> numericValue<span class="token punctuation">.</span>Value <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n            _ <span class="token operator">=></span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">UnreachableException</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"So a simple console application that spins the gears of our code will look like that:"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="csharp"><pre class="language-csharp"><code class="language-csharp"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"Write a property value: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> input <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> <span class="token keyword">value</span> <span class="token operator">=</span> <span class="token function">Parse</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Value \'</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">input</span><span class="token punctuation">}</span></span><span class="token string">\' is valid: "</span></span> <span class="token operator">+</span> ValidationHelper<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    \n<span class="token punctuation">}</span>\n\n<span class="token keyword">static</span> <span class="token return-type class-name">IValue</span> <span class="token function">Parse</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">var</span></span> num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NumericValue</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringValue</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"Let's test it:"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="plaintext"><pre class="language-plaintext"><code class="language-plaintext">Write a property value: foo\nValue \'foo\' is valid: True\nWrite a property value: 1 \nValue \'1\' is valid: True\nWrite a property value: -42\nValue \'-42\' is valid: False</code></pre></div>'}}),"\n",t.createElement(a.h2,{id:"the-issue",style:{position:"relative"}},t.createElement(a.a,{href:"#the-issue","aria-label":"the issue permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"The issue"),"\n",t.createElement(a.p,null,"At first glance everything looks fine! But what if we have dozens of such type pattern matching across the project, and some other developer introduces a new type for a value, for example, ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">DateTimeValue</code>'}}),"?"),"\n",t.createElement(a.p,null,"In that case, he or she needs to find all usages of pattern matching for ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">IValue</code>'}})," and add a branch for the new type. And also write tests to check that we won't have an ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">UnreachableException</code>'}})," thrown at runtime:"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="csharp"><pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">record</span> <span class="token class-name">DateTimeValue</span><span class="token punctuation">(</span><span class="token class-name">DateTimeOffset</span> Value<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IValue</span></span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"As our case is very simple, still, let's imaging that our imaginary developer implemented only parsing of the new type, but forgot to handle it in our helper function."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="csharp"><pre class="language-csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name">IValue</span> <span class="token function">Parse</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">var</span></span> num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">NumericValue</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// Parsing date, no other changes!</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>DateTimeOffset<span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">var</span></span> dateTime<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DateTimeValue</span><span class="token punctuation">(</span>dateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringValue</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"So, you may already guess what will happen if we pass ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">2024-02-18T19:38:37Z</code>'}})," to our CLI input."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="plaintext"><pre class="language-plaintext"><code class="language-plaintext">Write a property value: 2024-02-18T19:38:37Z\nUnhandled exception. System.Diagnostics.UnreachableException: The program executed an instruction that was thought to be unreachable.                                \n   at TypePatternMatchingOnVisitors.ValidationHelper.IsValid(IValue value) in C:\\Users\\AxelU\\projects\\learn\\TypePatternMatchingOnVisitors\\ValidationHelper.cs:line 13\n   at Program.&lt;Main>$(String[] args) in C:\\Users\\AxelU\\projects\\learn\\TypePatternMatchingOnVisitors\\Program.cs:line 8                                                \n\nProcess finished with exit code -532,462,766.</code></pre></div>'}}),"\n",t.createElement(a.p,null,"We found a bug! (how surprisingly, ha-ha)"),"\n",t.createElement(a.p,null,"Imaging that this will happen in production during the midnight while you're on-call. ",t.createElement(a.strong,null,"Not so funny now, huh?")),"\n",t.createElement(a.h2,{id:"solution-visitor-pattern",style:{position:"relative"}},t.createElement(a.a,{href:"#solution-visitor-pattern","aria-label":"solution visitor pattern permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Solution: Visitor Pattern"),"\n",t.createElement(a.p,null,"I'm sure that this bug can be found with tests or during code-review. But can we have a compilation error, indicating what places to fix? Like in Kotlin or Java with sealed interfaces and classes that allow creating an exhaustive ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">when</code>'}})," expression without a default branch and receiving compilation errors when a new type is not handled."),"\n",t.createElement(a.p,null,"Unfortunately, in C# we don't have language support for that yet. But surprisingly, an old-fashioned OOP pattern called ",t.createElement(a.a,{href:"https://refactoring.guru/design-patterns/visitor"},"Visitor")," can help us achieve that. We can add a generic ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Accept&lt;T></code>'}})," method for ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">IValue</code>'}}),", which accepts ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">IValueVisitor&lt;T></code>'}})," and returns a value of type ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">T</code>'}}),"."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="csharp"><pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IValue</span>\n<span class="token punctuation">{</span>\n    <span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">Accept</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token class-name">IValueVisitor<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span> visitor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"Interface ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">IValueVisitor&lt;T></code>'}})," has methods ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Accept</code>'}}),", with overloads, each accepting an implementation of ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">IValue</code>'}})," interface as a parameter and returning a value of generic type ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">T</code>'}}),"."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="csharp"><pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IValueVisitor<span class="token punctuation">&lt;</span><span class="token keyword">out</span> T<span class="token punctuation">></span></span>\n<span class="token punctuation">{</span>\n    <span class="token return-type class-name">T</span> <span class="token function">Visit</span><span class="token punctuation">(</span><span class="token class-name">StringValue</span> stringValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token return-type class-name">T</span> <span class="token function">Visit</span><span class="token punctuation">(</span><span class="token class-name">NumericValue</span> numericValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"In all ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">IValue</code>'}})," implementations, we just call ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">visitor.Visit(this)</code>'}})," and return the value from this invocation:"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="csharp"><pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">record</span> <span class="token class-name">StringValue</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> Value<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IValue</span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">Accept</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token class-name">IValueVisitor<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span> visitor<span class="token punctuation">)</span> <span class="token operator">=></span> visitor<span class="token punctuation">.</span><span class="token function">Visit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// ... same for other IValue implementations</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"We can rewrite a helper validation function to a class ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ValueValidationVisitor</code>'}}),", that for each ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Visit</code>'}})," overload performs the same check as it was done for the static function described above, generic type parameter in that case will be ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">bool</code>'}}),". Here's how it looks like:"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="csharp"><pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValueValidationVisitor</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IValueVisitor<span class="token punctuation">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">></span></span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Visit</span><span class="token punctuation">(</span><span class="token class-name">StringValue</span> stringValue<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span><span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">IsNullOrWhiteSpace</span><span class="token punctuation">(</span>stringValue<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Visit</span><span class="token punctuation">(</span><span class="token class-name">NumericValue</span> numericValue<span class="token punctuation">)</span> <span class="token operator">=></span> numericValue<span class="token punctuation">.</span>Value <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"When a developer adds a new class implementing ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">IValue</code>'}}),", for example, ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">DateTimeValue</code>'}}),", we need to implement an ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Accept</code>'}})," method, which should invoke the visitor's ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Visit</code>'}})," method:"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="csharp"><pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">record</span> <span class="token class-name">DateTimeValue</span><span class="token punctuation">(</span><span class="token class-name">DateTimeOffset</span> Value<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IValue</span></span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// Compilation error - we don\'t implement Visit for this value type yet!</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">Accept</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span></span><span class="token punctuation">(</span><span class="token class-name">IValueVisitor<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span></span> visitor<span class="token punctuation">)</span> <span class="token operator">=></span> visitor<span class="token punctuation">.</span><span class="token function">Visit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"But there's no such overload at ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">IValueVisitor&lt;T></code>'}})," that accepts ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">DateTimeValue</code>'}})," value, so we've got to add it into ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">IValueVisitor&lt;T></code>'}})," and implement it all over visitor's implementations:"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="csharp"><pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IValueVisitor<span class="token punctuation">&lt;</span><span class="token keyword">out</span> T<span class="token punctuation">></span></span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// ... other Visit overloads</span>\n\n    <span class="token return-type class-name">T</span> <span class="token function">Visit</span><span class="token punctuation">(</span><span class="token class-name">DateTimeValue</span> dateTimeValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValueValidationVisitor</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IValueVisitor<span class="token punctuation">&lt;</span><span class="token keyword">bool</span><span class="token punctuation">></span></span></span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// singleton for visitor cause it\'s stateless and safe to share between IValue instances</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">ValueValidationVisitor</span> Instance <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// ... other Visit overloads</span>\n\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Visit</span><span class="token punctuation">(</span><span class="token class-name">DateTimeValue</span> dateTimeValue<span class="token punctuation">)</span> <span class="token operator">=></span> dateTimeValue<span class="token punctuation">.</span>Value <span class="token operator">&lt;=</span> DateTimeOffset<span class="token punctuation">.</span>UtcNow<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>'}}),"\n",t.createElement(a.p,null,"So after all tons of code we've written, we can now change the console app and use ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ValueValidationVisitor</code>'}})," instead of ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ValidationHelper</code>'}}),". There's also a singleton instance of ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ValueValidationVisitor</code>'}})," that we can use in client code, so let's do it."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="csharp"><pre class="language-csharp"><code class="language-csharp"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    Console<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"Write a property value: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> input <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> <span class="token keyword">value</span> <span class="token operator">=</span> <span class="token function">Parse</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//Console.WriteLine($"Value \'{input}\' is valid: " + ValidationHelper.IsValid(value));    </span>\n    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Value \'</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">input</span><span class="token punctuation">}</span></span><span class="token string">\' is valid: "</span></span> <span class="token operator">+</span> <span class="token keyword">value</span><span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span>ValueValidationVisitor<span class="token punctuation">.</span>Instance<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    \n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"Voilà, now not only the bug is fixed, but also the chance of missed type handling is reduced, so in overall we strengthen our type-safety guarantees."),"\n",t.createElement(a.h2,{id:"final-thoughts",style:{position:"relative"}},t.createElement(a.a,{href:"#final-thoughts","aria-label":"final thoughts permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Final thoughts"),"\n",t.createElement(a.p,null,"However Visitor pattern is a lot more verbose than simple switch statement or expression, we are now almost absolutely sure that the developer doesn't miss to handle its new type. And as a reviewer, one will see all places that were changed in git diff without the need to double-check in the code of the project."),"\n",t.createElement(a.p,null,"So there you have it! By using Visitor pattern, you can make your C# code more maintainable and less prone to runtime errors, especially when adding new types or modifying existing ones. It may not be as elegant or concise, but it can save you a lot of headaches in the long run. If you want to see code - check it in ",t.createElement(a.a,{href:"https://github.com/AxelUser/TypePatternMatchingOnVisitors"},"this")," repository."),"\n",t.createElement(a.p,null,"And remember, a little bit of extra verbosity is worth the peace of mind!"))}var o=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,e.ah)(),n.components);return a?t.createElement(a,n,t.createElement(l,n)):l(n)},p=s(5785),c=s(3147),r=s(6864),u=s(4001),i=s(778),k=s(6753);const d=n=>{let{data:{current:a,next:s,previous:e},children:l}=n;return t.createElement(c.Z,{displayBio:c.x.AfterContent},t.createElement("div",{className:k.nC},t.createElement("span",{className:k.$y},t.createElement("time",null,a.frontmatter.date),t.createElement(i.Z,{tags:(0,p.Z)(a.frontmatter.tags)})),t.createElement("h1",null,null==a?void 0:a.frontmatter.title),t.createElement("div",{className:k.fL},l),t.createElement(r.Z,{prev:null!=e?{link:e.fields.path,title:e.frontmatter.title}:void 0,next:null!=s?{link:s.fields.path,title:s.frontmatter.title}:void 0})))},m=n=>{let{data:a}=n;return t.createElement(u.p,{title:a.current.frontmatter.title})};function g(n){return t.createElement(d,n,t.createElement(o,n))}},3147:function(n,a,s){s.d(a,{x:function(){return r},Z:function(){return u}});var e=s(1883),t=s(7294);s(358);var l=()=>t.createElement("div",{className:"y0ya850"},t.createElement("p",null,"Hi, I'm ",t.createElement("b",null,"Aleksey"),"!"),t.createElement("p",null,"I'm a ",t.createElement("span",{className:"y0ya851"},"Senior Software Engineer")," ","with a focus on distributed and high-load systems. I work with ",t.createElement("b",null,"С#"),","," ",t.createElement("b",null,"Go")," and ",t.createElement("b",null,"Kotlin"),". Check out my"," ",t.createElement("a",{href:"https://www.linkedin.com/in/dev-alexey-maltsev/"},"LinkedIn")," for my latest experience and my"," ",t.createElement("a",{href:"https://github.com/AxelUser"},"GitHub")," for projects.")),o="_15u9v4n2";const p=()=>t.createElement("header",null,t.createElement("nav",{className:"_15u9v4n1"},t.createElement(e.Link,{className:o,to:"/"},"Blog"),t.createElement(e.Link,{className:o,to:"/art"},"Art"))),c=n=>{let{author:a,currentYear:s}=n;return t.createElement("footer",null,t.createElement("small",null,"© ",s," ",a))};let r=function(n){return n[n.BeforeContent=0]="BeforeContent",n[n.AfterContent=1]="AfterContent",n}({});var u=n=>{var a,s,o,u;let{displayBio:i,children:k}=n;const d=(0,e.useStaticQuery)("4125657994");return t.createElement("div",{className:"_15u9v4n0"},t.createElement(p,null),i==r.BeforeContent&&t.createElement(l,null),k,i==r.AfterContent&&t.createElement(l,null),t.createElement(c,{author:(null==d||null===(a=d.site)||void 0===a||null===(s=a.siteMetadata)||void 0===s?void 0:s.author)||"",currentYear:(null==d||null===(o=d.site)||void 0===o||null===(u=o.siteMetadata)||void 0===u?void 0:u.currentYear)||0}))}},6864:function(n,a,s){s.d(a,{Z:function(){return o}});var e=s(1883),t=s(7294);s(358);const l=n=>{let{prefix:a,to:s}=n;return s?t.createElement(e.Link,{to:s.link,className:"u67xr02"},t.createElement("span",{className:"u67xr03"},a),t.createElement("span",{className:"u67xr04"},s.title)):t.createElement(t.Fragment,null)};var o=n=>{let{prev:a,next:s}=n;return t.createElement("nav",{className:"u67xr01"},t.createElement(l,{prefix:"Previous",to:a}),t.createElement(l,{prefix:"Next",to:s}))}},4001:function(n,a,s){s.d(a,{p:function(){return l}});var e=s(1883),t=s(7294);function l(n){var a,s,l,o,p,c;const r=(0,e.useStaticQuery)("834308132"),u=n.title?(null==r||null===(a=r.site)||void 0===a||null===(s=a.siteMetadata)||void 0===s?void 0:s.title)+" | "+n.title:null==r||null===(l=r.site)||void 0===l||null===(o=l.siteMetadata)||void 0===o?void 0:o.title;return t.createElement(t.Fragment,null,t.createElement("title",null,u),t.createElement("meta",{name:"google-site-verification",content:(null==r||null===(p=r.site)||void 0===p||null===(c=p.siteMetadata)||void 0===c?void 0:c.googleSiteVerification)||void 0}))}},778:function(n,a,s){var e=s(7294);a.Z=n=>{let{tags:a}=n;return e.createElement(e.Fragment,null,a.map((n=>e.createElement("span",null,"[",n,"]"))))}},1151:function(n,a,s){s.d(a,{ah:function(){return l}});var e=s(7294);const t=e.createContext({});function l(n){const a=e.useContext(t);return e.useMemo((()=>"function"==typeof n?n(a):{...a,...n}),[a,n])}}}]);
//# sourceMappingURL=component---src-templates-blog-post-tsx-content-file-path-content-blog-007-fixing-csharp-type-pattern-matching-index-md-31d9e7d21573e6dcf9af.js.map