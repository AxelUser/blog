"use strict";(self.webpackChunkmaltsev_space=self.webpackChunkmaltsev_space||[]).push([[243],{6753:function(e,n,a){a.d(n,{nC:function(){return t},$y:function(){return s},fL:function(){return l}});a(358);var t="_14sfvu70",s="_14sfvu72",l="_14sfvu71"},959:function(e,n,a){a.r(n),a.d(n,{Head:function(){return d},default:function(){return g}});var t=a(1151),s=a(7294);function l(e){const n=Object.assign({p:"p",h2:"h2",a:"a",span:"span",em:"em",ul:"ul",li:"li",h3:"h3"},(0,t.ah)(),e.components);return s.createElement(s.Fragment,null,s.createElement(n.p,null,"In software development, especially when working with large codebases, tracking down where and how methods are called can be a challenging task. Debugging and logging become essential tools in a developer's toolkit to understand the flow of execution and identify issues."),"\n",s.createElement(n.p,null,'Since C# 4.5, the language introduced a set of "magic" attributes that greatly simplify this process. These attributes automatically provide information about the caller, making your code cleaner and more maintainable.'),"\n",s.createElement(n.p,null,"This blog post will delve into how these attributes work, provide examples of their use, and demonstrate how they can enhance your debugging and logging efforts."),"\n",s.createElement(n.h2,{id:"understanding-caller-information-attributes",style:{position:"relative"}},s.createElement(n.a,{href:"#understanding-caller-information-attributes","aria-label":"understanding caller information attributes permalink",className:"anchor before"},s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Understanding Caller Information Attributes"),"\n",s.createElement(n.p,null,"Caller information attributes are designed to retrieve metadata about the caller of a method. They are ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">CallerFilePath</code>'}}),", ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">CallerLineNumber</code>'}})," and ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">CallerMemberName</code>'}}),"."),"\n",s.createElement(n.p,null,"These attributes allow you to change the default values of optional parameters in methods, providing valuable information about the location in the code where the method was called."),"\n",s.createElement(n.h2,{id:"what-is-a-caller",style:{position:"relative"}},s.createElement(n.a,{href:"#what-is-a-caller","aria-label":"what is a caller permalink",className:"anchor before"},s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"What is a Caller?"),"\n",s.createElement(n.p,null,"In programming, a ",s.createElement(n.em,null,"caller")," is the piece of code that invokes (calls) a method or function. Understanding the context of the caller can help in debugging and maintaining code, as it tells you where a particular method was called from within your application."),"\n",s.createElement(n.h2,{id:"default-behavior-of-optional-parameters",style:{position:"relative"}},s.createElement(n.a,{href:"#default-behavior-of-optional-parameters","aria-label":"default behavior of optional parameters permalink",className:"anchor before"},s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Default Behavior of Optional Parameters"),"\n",s.createElement(n.p,null,"By default, the compiler translates optional parameters into their default values if no other value is provided. For example, consider the following logging method:"),"\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="csharp"><pre class="language-csharp"><code class="language-csharp"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Log</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> msg<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> method <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// logging somewhere</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",s.createElement(n.p,null,"If you call this method with ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Log(msg)</code>'}}),", the compiler translates this to ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Log(msg, null)</code>'}}),"."),"\n",s.createElement(n.h2,{id:"enhancing-optional-parameters-with-caller-attributes",style:{position:"relative"}},s.createElement(n.a,{href:"#enhancing-optional-parameters-with-caller-attributes","aria-label":"enhancing optional parameters with caller attributes permalink",className:"anchor before"},s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Enhancing Optional Parameters with Caller Attributes"),"\n",s.createElement(n.p,null,"You can enhance this behavior using caller attributes. By placing these attributes before the optional parameters in your method, the compiler will automatically fill in the predefined values:"),"\n",s.createElement(n.ul,null,"\n",s.createElement(n.li,null,s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">CallerFilePath</code>'}})," passes the full path of the source code file where the method was called."),"\n",s.createElement(n.li,null,s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">CallerLineNumber</code>'}})," passes the line number (as an integer) where the method was called."),"\n",s.createElement(n.li,null,s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">CallerMemberName</code>'}})," passes the name of the member (constructor, method, property, event, etc.) that called the method."),"\n"),"\n",s.createElement(n.h2,{id:"example-tracing-or-logging",style:{position:"relative"}},s.createElement(n.a,{href:"#example-tracing-or-logging","aria-label":"example tracing or logging permalink",className:"anchor before"},s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Example: Tracing or Logging"),"\n",s.createElement(n.p,null,"For instance, if you want to write tracing or logging code and need to know where an event occurred, you can use these attributes as shown below:"),"\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="csharp"><pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TraceEvent</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> message<span class="token punctuation">,</span>\n    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CallerMemberName</span></span><span class="token punctuation">]</span> <span class="token class-name"><span class="token keyword">string</span></span> memberName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CallerFilePath</span></span><span class="token punctuation">]</span> <span class="token class-name"><span class="token keyword">string</span></span> sourceFilePath <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CallerLineNumber</span></span><span class="token punctuation">]</span> <span class="token class-name"><span class="token keyword">int</span></span> sourceLineNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    Trace<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"event: "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    Trace<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"member name: "</span> <span class="token operator">+</span> memberName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    Trace<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"source file path: "</span> <span class="token operator">+</span> sourceFilePath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    Trace<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"source line number: "</span> <span class="token operator">+</span> sourceLineNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",s.createElement(n.p,null,"When you invoke this method:"),"\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="csharp"><pre class="language-csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token function">TraceEvent</span><span class="token punctuation">(</span><span class="token string">"Started"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",s.createElement(n.p,null,"You will see output similar to:"),"\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="plaintext"><pre class="language-plaintext"><code class="language-plaintext">event: Started\nmember name: Main\nsource file path: C:\\some\\path\\to\\source\\CallerInfoTest.Cli\\CallerInfoTest.Cli\\Program.cs\nsource line number: 11</code></pre></div>'}}),"\n",s.createElement(n.h3,{id:"example-implementing-inotifypropertychanged",style:{position:"relative"}},s.createElement(n.a,{href:"#example-implementing-inotifypropertychanged","aria-label":"example implementing inotifypropertychanged permalink",className:"anchor before"},s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Example: Implementing INotifyPropertyChanged"),"\n",s.createElement(n.p,null,"If you are familiar with ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">INotifyPropertyChanged</code>'}}),", you can implement the PropertyChanged event without the hassle of always passing the name of the property that was changed. Here is an example:"),"\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="csharp"><pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ViewModel</span><span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">INotifyPropertyChanged</span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> _message<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token return-type class-name">String</span> Message\n    <span class="token punctuation">{</span>\n        <span class="token keyword">get</span> <span class="token operator">=></span> _message<span class="token punctuation">;</span>\n        <span class="token keyword">set</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token operator">==</span> _message<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n            _message <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>\n            <span class="token function">OnPropertyChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">event</span> <span class="token class-name">PropertyChangedEventHandler</span> PropertyChanged<span class="token punctuation">;</span>\n\n    <span class="token keyword">protected</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnPropertyChanged</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">CallerMemberName</span></span><span class="token punctuation">]</span> <span class="token class-name">String</span> propertyName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        PropertyChanged<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">PropertyChangedEventArgs</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",s.createElement(n.p,null,"In this example, the ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">OnPropertyChanged</code>'}})," method uses the ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">[CallerMemberName]</code>'}})," attribute to automatically provide the name of the property that has changed, eliminating the need to manually specify it each time."),"\n",s.createElement(n.h2,{id:"final-thoughts",style:{position:"relative"}},s.createElement(n.a,{href:"#final-thoughts","aria-label":"final thoughts permalink",className:"anchor before"},s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Final thoughts"),"\n",s.createElement(n.p,null,"Leveraging caller information attributes in C# can significantly simplify your debugging, logging, and event-handling code, making it more robust and easier to maintain."),"\n",s.createElement(n.p,null,"By automatically providing information about the caller, these attributes save you time and reduce the likelihood of errors in your code. For more details on these attributes, you can refer to the ",s.createElement(n.a,{href:"https://docs.microsoft.com/ru-ru/dotnet/csharp/programming-guide/concepts/caller-information"},"official documentation")," about these attributes."))}var o=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?s.createElement(n,e,s.createElement(l,e)):l(e)},r=a(5785),c=a(3147),p=a(6864),i=a(4001),u=a(778),m=a(6753);const h=e=>{let{data:{current:n,next:a,previous:t},children:l}=e;return s.createElement(c.Z,{displayBio:c.x.AfterContent},s.createElement("div",{className:m.nC},s.createElement("span",{className:m.$y},s.createElement("time",null,n.frontmatter.date),s.createElement(u.Z,{tags:(0,r.Z)(n.frontmatter.tags)})),s.createElement("h1",null,null==n?void 0:n.frontmatter.title),s.createElement("div",{className:m.fL},l),s.createElement(p.Z,{prev:null!=t?{link:t.fields.path,title:t.frontmatter.title}:void 0,next:null!=a?{link:a.fields.path,title:a.frontmatter.title}:void 0})))},d=e=>{let{data:n}=e;return s.createElement(i.p,{title:n.current.frontmatter.title})};function g(e){return s.createElement(h,e,s.createElement(o,e))}},3147:function(e,n,a){a.d(n,{x:function(){return p},Z:function(){return i}});var t=a(1883),s=a(7294);a(358);var l=()=>s.createElement("div",{className:"y0ya850"},s.createElement("p",null,"Hi, I'm ",s.createElement("b",null,"Aleksey"),"!"),s.createElement("p",null,"I'm a ",s.createElement("span",{className:"y0ya851"},"Senior Software Engineer")," ","with a focus on distributed and high-load systems. I work with ",s.createElement("b",null,"С#"),","," ",s.createElement("b",null,"Go")," and ",s.createElement("b",null,"Kotlin"),". Check out my"," ",s.createElement("a",{href:"https://www.linkedin.com/in/dev-alexey-maltsev/"},"LinkedIn")," for my latest experience and my"," ",s.createElement("a",{href:"https://github.com/AxelUser"},"GitHub")," for projects.")),o="_15u9v4n2";const r=()=>s.createElement("header",null,s.createElement("nav",{className:"_15u9v4n1"},s.createElement(t.Link,{className:o,to:"/"},"Blog"),s.createElement(t.Link,{className:o,to:"/art"},"Art"))),c=e=>{let{author:n,currentYear:a}=e;return s.createElement("footer",null,s.createElement("small",null,"© ",a," ",n))};let p=function(e){return e[e.BeforeContent=0]="BeforeContent",e[e.AfterContent=1]="AfterContent",e}({});var i=e=>{var n,a,o,i;let{displayBio:u,children:m}=e;const h=(0,t.useStaticQuery)("4125657994");return s.createElement("div",{className:"_15u9v4n0"},s.createElement(r,null),u==p.BeforeContent&&s.createElement(l,null),m,u==p.AfterContent&&s.createElement(l,null),s.createElement(c,{author:(null==h||null===(n=h.site)||void 0===n||null===(a=n.siteMetadata)||void 0===a?void 0:a.author)||"",currentYear:(null==h||null===(o=h.site)||void 0===o||null===(i=o.siteMetadata)||void 0===i?void 0:i.currentYear)||0}))}},6864:function(e,n,a){a.d(n,{Z:function(){return o}});var t=a(1883),s=a(7294);a(358);const l=e=>{let{prefix:n,to:a}=e;return a?s.createElement(t.Link,{to:a.link,className:"u67xr02"},s.createElement("span",{className:"u67xr03"},n),s.createElement("span",{className:"u67xr04"},a.title)):s.createElement(s.Fragment,null)};var o=e=>{let{prev:n,next:a}=e;return s.createElement("nav",{className:"u67xr01"},s.createElement(l,{prefix:"Previous",to:n}),s.createElement(l,{prefix:"Next",to:a}))}},4001:function(e,n,a){a.d(n,{p:function(){return l}});var t=a(1883),s=a(7294);function l(e){var n,a,l,o,r,c;const p=(0,t.useStaticQuery)("834308132"),i=e.title?(null==p||null===(n=p.site)||void 0===n||null===(a=n.siteMetadata)||void 0===a?void 0:a.title)+" | "+e.title:null==p||null===(l=p.site)||void 0===l||null===(o=l.siteMetadata)||void 0===o?void 0:o.title;return s.createElement(s.Fragment,null,s.createElement("title",null,i),s.createElement("meta",{name:"google-site-verification",content:(null==p||null===(r=p.site)||void 0===r||null===(c=r.siteMetadata)||void 0===c?void 0:c.googleSiteVerification)||void 0}))}},778:function(e,n,a){var t=a(7294);n.Z=e=>{let{tags:n}=e;return t.createElement(t.Fragment,null,n.map((e=>t.createElement("span",null,"[",e,"]"))))}},1151:function(e,n,a){a.d(n,{ah:function(){return l}});var t=a(7294);const s=t.createContext({});function l(e){const n=t.useContext(s);return t.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}}}]);
//# sourceMappingURL=component---src-templates-blog-post-tsx-content-file-path-content-blog-002-callermembername-attribute-for-logging-index-md-3ce8651d7a4c8cb9ab11.js.map