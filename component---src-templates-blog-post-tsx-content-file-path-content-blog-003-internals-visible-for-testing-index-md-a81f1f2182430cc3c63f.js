"use strict";(self.webpackChunkmaltsev_space=self.webpackChunkmaltsev_space||[]).push([[544],{6753:function(e,n,t){t.d(n,{nC:function(){return a},$y:function(){return s},fL:function(){return l}});t(358);var a="_14sfvu70",s="_14sfvu72",l="_14sfvu71"},5696:function(e,n,t){t.r(n),t.d(n,{Head:function(){return k},default:function(){return h}});var a=t(1151),s=t(7294);function l(e){const n=Object.assign({h2:"h2",a:"a",span:"span",p:"p",ul:"ul",li:"li"},(0,a.ah)(),e.components);return s.createElement(s.Fragment,null,s.createElement(n.h2,{id:"about-tests-for-private-code",style:{position:"relative"}},s.createElement(n.a,{href:"#about-tests-for-private-code","aria-label":"about tests for private code permalink",className:"anchor before"},s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"About tests for private code"),"\n",s.createElement(n.p,null,'Well, most of the time, if you need to test some private logic, maybe you it\'s better to be SPECIFIC and extract it to public members of new classes. Sometimes decomposition "rocks" and you code became clearer and more maintainable, so check it out before.'),"\n",s.createElement(n.p,null,"However, this private logic can be really connected to the domain of a single class and isn't worth of extracting it somewhere else."),"\n",s.createElement(n.p,null,"In that case you have 3 simple options and all of them somehow break the idea of encapsulation:"),"\n",s.createElement(n.ul,null,"\n",s.createElement(n.li,null,"Make those members ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">public</code>'}}),' and treat them in your test-fixtures as usual. It may be OK, if you are writing simple app and for now you don\'t care about clean public interfaces. However, if you provide it as a public library, This approach opens you internal logic for every user, so, if "dirty" usage of these members could break state of your objects or even whole application.'),"\n",s.createElement(n.li,null,"Make those members ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">protected</code>'}}),", inherit into your testable stub, which will make those members ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">public</code>'}}),", or derive your test-fixture from it. This can also work, but you have to write some boilerplate code. However, it is not suitable, if your class is sealed. For example, if you don't want users to extend it, as it may break the logic of connected classes."),"\n",s.createElement(n.li,null,"Make those members ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">internal</code>'}})," and add ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">InternalsVisibleTo</code>'}})," attribute on assembly-level. This approach also breaks encapsulation, but only inside you assembly, all your public interfaces for users will stay clean and secure. And you don't need to use inheritance and write stubs."),"\n"),"\n",s.createElement(n.h2,{id:"how-to-use-internalsvisibleto",style:{position:"relative"}},s.createElement(n.a,{href:"#how-to-use-internalsvisibleto","aria-label":"how to use internalsvisibleto permalink",className:"anchor before"},s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"How to use ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">InternalsVisibleTo</code>'}})),"\n",s.createElement(n.p,null,"For example, you have got a class ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Some</code>'}})," with public method ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Increment</code>'}})," and internal property ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Counter</code>'}})," as object's state:"),"\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="csharp"><pre class="language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> <span class="token namespace">InternalsLib</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Some</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">internal</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Counter <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n        <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            Counter<span class="token operator">++</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",s.createElement(n.p,null,"You want to assert its state in some CLI or test-fixture:"),"\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="csharp"><pre class="language-csharp"><code class="language-csharp"><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Diagnostics</span><span class="token punctuation">;</span>\n<span class="token keyword">using</span> <span class="token namespace">InternalsLib</span><span class="token punctuation">;</span>\n\n<span class="token keyword">namespace</span> <span class="token namespace">InternalsVisibleTests</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">class</span> <span class="token class-name">Program</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token class-name"><span class="token keyword">var</span></span> someObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            someObj<span class="token punctuation">.</span><span class="token function">Increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            Trace<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Expected count </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token number">1</span></span><span class="token punctuation">}</span></span><span class="token string">, real count </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">someObj<span class="token punctuation">.</span>Counter</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",s.createElement(n.p,null,"We can't access property ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Counter</code>'}})," in assembly ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">InternalsVisibleTests</code>'}}),", because it's modifier is ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">internal</code>'}}),". To open internal logic for other assemblies, you need to provide attribute for whole testable assembly in file ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">AssemblyInfo.cs</code>'}})," or just above the definition of your class, it doesn't really matter.\nLet's put attribute invocation into ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">AssemblyInfo.cs</code>'}})," of project ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">InternalsLib</code>'}}),":"),"\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="csharp"><pre class="language-csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token target keyword">assembly</span><span class="token punctuation">:</span> <span class="token class-name">InternalsVisibleTo</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">"InternalsVisibleTests"</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span></code></pre></div>'}}),"\n",s.createElement(n.p,null,"Now ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">InternalsVisibleTests</code>'}})," became a friend assembly and internal members from assembly ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">InternalsLib</code>'}})," became visible inside of its scope."),"\n",s.createElement(n.p,null,"You can learn more about ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">InternalsVisibleTo</code>'}})," at ",s.createElement(n.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.internalsvisibletoattribute"},"documentation"),"."))}var o=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?s.createElement(n,e,s.createElement(l,e)):l(e)},c=t(5785),r=t(3147),i=t(6864),p=t(4001),u=t(778),m=t(6753);const d=e=>{let{data:{current:n,next:t,previous:a},children:l}=e;return s.createElement(r.Z,{displayBio:r.x.AfterContent},s.createElement("div",{className:m.nC},s.createElement("span",{className:m.$y},s.createElement("time",null,n.frontmatter.date),s.createElement(u.Z,{tags:(0,c.Z)(n.frontmatter.tags)})),s.createElement("h1",null,null==n?void 0:n.frontmatter.title),s.createElement("div",{className:m.fL},l),s.createElement(i.Z,{prev:null!=a?{link:a.fields.path,title:a.frontmatter.title}:void 0,next:null!=t?{link:t.fields.path,title:t.frontmatter.title}:void 0})))},k=e=>{let{data:n}=e;return s.createElement(p.p,{title:n.current.frontmatter.title})};function h(e){return s.createElement(d,e,s.createElement(o,e))}},3147:function(e,n,t){t.d(n,{x:function(){return i},Z:function(){return p}});var a=t(1883),s=t(7294);t(358);var l=()=>s.createElement("div",{className:"y0ya850"},s.createElement("p",null,"Hi, I'm ",s.createElement("b",null,"Aleksey"),"!"),s.createElement("p",null,"I'm a ",s.createElement("span",{className:"y0ya851"},"Senior Software Engineer")," ","with a focus on distributed and high-load systems. I work with ",s.createElement("b",null,"С#"),","," ",s.createElement("b",null,"Go")," and ",s.createElement("b",null,"Kotlin"),". Check out my"," ",s.createElement("a",{href:"https://www.linkedin.com/in/dev-alexey-maltsev/"},"LinkedIn")," for my latest experience and my"," ",s.createElement("a",{href:"https://github.com/AxelUser"},"GitHub")," for projects.")),o="_15u9v4n2";const c=()=>s.createElement("header",null,s.createElement("nav",{className:"_15u9v4n1"},s.createElement(a.Link,{className:o,to:"/"},"Blog"),s.createElement(a.Link,{className:o,to:"/art"},"Art"))),r=e=>{let{author:n,currentYear:t}=e;return s.createElement("footer",null,s.createElement("small",null,"© ",t," ",n))};let i=function(e){return e[e.BeforeContent=0]="BeforeContent",e[e.AfterContent=1]="AfterContent",e}({});var p=e=>{var n,t,o,p;let{displayBio:u,children:m}=e;const d=(0,a.useStaticQuery)("4125657994");return s.createElement("div",{className:"_15u9v4n0"},s.createElement(c,null),u==i.BeforeContent&&s.createElement(l,null),m,u==i.AfterContent&&s.createElement(l,null),s.createElement(r,{author:(null==d||null===(n=d.site)||void 0===n||null===(t=n.siteMetadata)||void 0===t?void 0:t.author)||"",currentYear:(null==d||null===(o=d.site)||void 0===o||null===(p=o.siteMetadata)||void 0===p?void 0:p.currentYear)||0}))}},6864:function(e,n,t){t.d(n,{Z:function(){return o}});var a=t(1883),s=t(7294);t(358);const l=e=>{let{prefix:n,to:t}=e;return t?s.createElement(a.Link,{to:t.link,className:"u67xr02"},s.createElement("span",{className:"u67xr03"},n),s.createElement("span",{className:"u67xr04"},t.title)):s.createElement(s.Fragment,null)};var o=e=>{let{prev:n,next:t}=e;return s.createElement("nav",{className:"u67xr01"},s.createElement(l,{prefix:"Previous",to:n}),s.createElement(l,{prefix:"Next",to:t}))}},4001:function(e,n,t){t.d(n,{p:function(){return l}});var a=t(1883),s=t(7294);function l(e){var n,t,l,o,c,r;const i=(0,a.useStaticQuery)("834308132"),p=e.title?(null==i||null===(n=i.site)||void 0===n||null===(t=n.siteMetadata)||void 0===t?void 0:t.title)+" | "+e.title:null==i||null===(l=i.site)||void 0===l||null===(o=l.siteMetadata)||void 0===o?void 0:o.title;return s.createElement(s.Fragment,null,s.createElement("title",null,p),s.createElement("meta",{name:"google-site-verification",content:(null==i||null===(c=i.site)||void 0===c||null===(r=c.siteMetadata)||void 0===r?void 0:r.googleSiteVerification)||void 0}))}},778:function(e,n,t){var a=t(7294);n.Z=e=>{let{tags:n}=e;return a.createElement(a.Fragment,null,n.map((e=>a.createElement("span",null,"[",e,"]"))))}},1151:function(e,n,t){t.d(n,{ah:function(){return l}});var a=t(7294);const s=a.createContext({});function l(e){const n=a.useContext(s);return a.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}}}]);
//# sourceMappingURL=component---src-templates-blog-post-tsx-content-file-path-content-blog-003-internals-visible-for-testing-index-md-a81f1f2182430cc3c63f.js.map