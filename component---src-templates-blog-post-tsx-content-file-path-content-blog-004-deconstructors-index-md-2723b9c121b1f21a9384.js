"use strict";(self.webpackChunkmaltsev_space=self.webpackChunkmaltsev_space||[]).push([[311],{6753:function(n,s,a){a.d(s,{nC:function(){return t},$y:function(){return e},fL:function(){return p}});a(358);var t="_14sfvu70",e="_14sfvu72",p="_14sfvu71"},7642:function(n,s,a){a.r(s),a.d(s,{Head:function(){return g},default:function(){return m}});var t=a(1151),e=a(7294);function p(n){const s=Object.assign({h2:"h2",a:"a",span:"span",p:"p",ul:"ul",li:"li",strong:"strong"},(0,t.ah)(),n.components);return e.createElement(e.Fragment,null,e.createElement(s.h2,{id:"about-tuples-in-c-7",style:{position:"relative"}},e.createElement(s.a,{href:"#about-tuples-in-c-7","aria-label":"about tuples in c 7 permalink",className:"anchor before"},e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"About tuples in C# 7"),"\n",e.createElement(s.p,null,"New tuples and its support in C# 7 are blazing-cool:"),"\n",e.createElement(s.ul,null,"\n",e.createElement(s.li,null,"they are structures, so no heap allocations;"),"\n",e.createElement(s.li,null,"they have aliases for names of its fields (",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">tuple.Info</code>'}})," vs old ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">tuple.Item1</code>'}}),");"),"\n",e.createElement(s.li,null,"they bring syntax-sugar of deconstruction;"),"\n"),"\n",e.createElement(s.p,null,"Moreover, the deconstruction can be used not only for build-in tuples, but also for your own classes and structures."),"\n",e.createElement(s.h2,{id:"deconstruction-for-tuples",style:{position:"relative"}},e.createElement(s.a,{href:"#deconstruction-for-tuples","aria-label":"deconstruction for tuples permalink",className:"anchor before"},e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Deconstruction for tuples"),"\n",e.createElement(s.p,null,"Let's start with the original usage for tuples. If you are already familiar with it, you may jump to ",e.createElement(s.a,{href:"#implementing-deconstruction-for-custom-types"},"the next block"),"."),"\n",e.createElement(s.p,null,"For example, you have a method, which returns a statistic about most frequent word in a form of a tuple with two fields: word and count. Below is the example of such method:"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="csharp"><pre class="language-csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span></span> <span class="token function">GetMostFrequentWord</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> text<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> <span class="token keyword">group</span> <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token char">\' \'</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">GroupBy</span><span class="token punctuation">(</span>s <span class="token operator">=></span> s<span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">OrderByDescending</span><span class="token punctuation">(</span>grouping <span class="token operator">=></span> grouping<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">group</span><span class="token punctuation">.</span>Key<span class="token punctuation">,</span> <span class="token keyword">group</span><span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"As you see, ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">GetMostFrequentWord</code>'}})," returns unnamed tuple, and you can access its fields via ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Item1</code>'}})," and ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Item2</code>'}}),":"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="csharp"><pre class="language-csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name"><span class="token keyword">string</span></span> text <span class="token operator">=</span> <span class="token string">"tuple for testing tuple"</span><span class="token punctuation">;</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> stat <span class="token operator">=</span> <span class="token function">GetMostFrequentWord</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    Trace<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"word: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">stat<span class="token punctuation">.</span>Item1</span><span class="token punctuation">}</span></span><span class="token string">, count: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">stat<span class="token punctuation">.</span>Item2</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"On the other hand, if you implement named-tuple, those values can be accessed through aliases, you just need to make some changes into declaration of the tuple:"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="csharp"><pre class="language-csharp"><code class="language-csharp"><span class="token comment">// we added aliases for the output below</span>\n<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token punctuation">(</span><span class="token keyword">string</span> word<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span></span> <span class="token function">GetMostFrequentWord</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> text<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// same logic</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name"><span class="token keyword">string</span></span> text <span class="token operator">=</span> <span class="token string">"tuple for testing tuple"</span><span class="token punctuation">;</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> stat <span class="token operator">=</span> <span class="token function">GetMostFrequentWord</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// but now we use aliases for fields</span>\n    Trace<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"word: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">stat<span class="token punctuation">.</span>word</span><span class="token punctuation">}</span></span><span class="token string">, count: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">stat<span class="token punctuation">.</span>count</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"However, our original need is just getting those fields ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">word</code>'}})," and ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">count</code>'}}),", we don't really care about grouping tuple. So be it: with the help of deconstruction, we can initialize only variables ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">word</code>'}})," and ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">count</code>'}}),":"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="csharp"><pre class="language-csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name"><span class="token keyword">string</span></span> text <span class="token operator">=</span> <span class="token string">"tuple for testing tuple"</span><span class="token punctuation">;</span>\n    <span class="token comment">// no tuple now, just values from its fields</span>\n    <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> word<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> count<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">GetMostFrequentWord</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    Trace<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"word: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">word</span><span class="token punctuation">}</span></span><span class="token string">, count: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">count</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"In addition, you can even use ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">var</code>'}})," for completely deconstructed tuple, instead of specifying explicit types for every field:"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="csharp"><pre class="language-csharp"><code class="language-csharp"><span class="token keyword">var</span> <span class="token punctuation">(</span>word<span class="token punctuation">,</span> count<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">GetMostFrequentWord</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"If you don't need some fields from deconstruction, you can use another feature of C# 7 - ",e.createElement(s.a,{href:"https://docs.microsoft.com/ru-ru/dotnet/csharp/discards"},"discards"),". For example, if we want to discard the creation of variable ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">count</code>'}})," during deconstruction, we can pass ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">_</code>'}})," instead:"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="csharp"><pre class="language-csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name"><span class="token keyword">string</span></span> text <span class="token operator">=</span> <span class="token string">"tuple for testing tuple"</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> <span class="token punctuation">(</span>word<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">GetMostFrequentWord</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    Trace<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Most frequent word: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">word</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(s.h2,{id:"implementing-deconstruction-for-custom-types",style:{position:"relative"}},e.createElement(s.a,{href:"#implementing-deconstruction-for-custom-types","aria-label":"implementing deconstruction for custom types permalink",className:"anchor before"},e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Implementing deconstruction for custom types"),"\n",e.createElement(s.p,null,"Using deconstruction of tuples is quite straightforward, how about user-defined types? You may want ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">GetMostFrequentWord</code>'}})," to return your own struct ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">WordStat</code>'}}),":"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="csharp"><pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">WordStat</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Word <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> Count <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token function">WordStat</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> word<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> count<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        Word <span class="token operator">=</span> word<span class="token punctuation">;</span>\n        Count <span class="token operator">=</span> count<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">static</span> <span class="token return-type class-name">WordStat</span> <span class="token function">GetMostFrequentWordStats</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> text<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> <span class="token keyword">group</span> <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token char">\' \'</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">GroupBy</span><span class="token punctuation">(</span>s <span class="token operator">=></span> s<span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">OrderByDescending</span><span class="token punctuation">(</span>grouping <span class="token operator">=></span> grouping<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">WordStat</span><span class="token punctuation">(</span><span class="token keyword">group</span><span class="token punctuation">.</span>Key<span class="token punctuation">,</span> <span class="token keyword">group</span><span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"Generic tuples are great, but there are several reasons for using your own models:"),"\n",e.createElement(s.ul,null,"\n",e.createElement(s.li,null,'Better readability, as your code became less "technical".'),"\n",e.createElement(s.li,null,"Easy refactoring, for example, if you want to change field names or add new ones."),"\n",e.createElement(s.li,null,"Your model has domain specifics, but generic tuples - doesn't."),"\n"),"\n",e.createElement(s.p,null,"So, we will use ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">WordStat</code>'}})," instead of a tuple, but can we use deconstruction for our model?"),"\n",e.createElement(s.p,null,"We are lucky because we can add this feature to our type. All is needed is adding new public method ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Deconstruct</code>'}})," with ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">out</code>'}})," parameters, that will be extracted during deconstruction:"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="csharp"><pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Deconstruct</span><span class="token punctuation">(</span><span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">string</span></span> word<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">int</span></span> count<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    word <span class="token operator">=</span> Word<span class="token punctuation">;</span>\n    count <span class="token operator">=</span> Count<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"After that, smart compiler will use this method to produce deconstructed values:"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="csharp"><pre class="language-csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name"><span class="token keyword">string</span></span> text <span class="token operator">=</span> <span class="token string">"tuple for testing tuple"</span><span class="token punctuation">;</span>\n    <span class="token comment">// visually nothing has changed</span>\n    <span class="token keyword">var</span> <span class="token punctuation">(</span>word<span class="token punctuation">,</span> count<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">GetMostFrequentWordStats</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    Trace<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"word: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">word</span><span class="token punctuation">}</span></span><span class="token string">, count: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">count</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"Deconstructed fields must be of same types and in same order and count, as they appear in ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Deconstruct</code>'}}),". You can have as many configurations of deconstruction, as how many overrides of ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Deconstruct</code>'}})," you have.\nOne more thing - ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Deconstruct</code>'}})," may be an extension-method!"),"\n",e.createElement(s.p,null,"Let's add a new field ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">WordLength</code>'}})," to ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">WordStat</code>'}})," and write an extension to get all those three fields:"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="csharp"><pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Extensions</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Deconstruct</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">Program<span class="token punctuation">.</span>WordStat</span> stat<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">string</span></span> word<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">int</span></span> count<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">int</span></span> length<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        word <span class="token operator">=</span> stat<span class="token punctuation">.</span>Word<span class="token punctuation">;</span>\n        count <span class="token operator">=</span> stat<span class="token punctuation">.</span>Count<span class="token punctuation">;</span>\n        length <span class="token operator">=</span> stat<span class="token punctuation">.</span>WordLength<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"Now we can get word's length from deconstruction:"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="csharp"><pre class="language-csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name"><span class="token keyword">string</span></span> text <span class="token operator">=</span> <span class="token string">"tuple for testing tuple"</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> <span class="token punctuation">(</span>word<span class="token punctuation">,</span> count<span class="token punctuation">,</span> length<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">GetMostFrequentWordStats</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    Trace<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"word: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">word</span><span class="token punctuation">}</span></span><span class="token string">, count: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">count</span><span class="token punctuation">}</span></span><span class="token string">, length: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">length</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(s.h2,{id:"use-cases-of-deconstruction",style:{position:"relative"}},e.createElement(s.a,{href:"#use-cases-of-deconstruction","aria-label":"use cases of deconstruction permalink",className:"anchor before"},e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Use-cases of deconstruction"),"\n",e.createElement(s.p,null,"Imagine a service, which sends you some data, for example aggregational count of some records in some data-sources. Method takes a long time to aggregate. Let's say it's signature will be:"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="csharp"><pre class="language-csharp"><code class="language-csharp"><span class="token return-type class-name">Task<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span></span> <span class="token function">Count</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> dataSourcesUrls<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"What if service failed, while retrieving count; or even more complicated - it failed only for several sources. What will be the result of ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Count</code>'}}),": partial count, ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">default(int)</code>'}}),", ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">-1</code>'}}),", ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">null</code>'}})," (if it will be ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Nullable&lt;int></code>'}}),")? Or maybe ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Count</code>'}})," will throw an exception?"),"\n",e.createElement(s.p,null,"One approach is to use complex type as a result; often it is named as ",e.createElement(s.strong,null,"Operation Result"),". It usually consists of requested data and some information about errors, which have been occurred (or not). Below is the example:"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="csharp"><pre class="language-csharp"><code class="language-csharp"><span class="token comment">// Our service</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AggregationService</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name">Task<span class="token punctuation">&lt;</span>OperationResult<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">Count</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> dataSourcesUrls<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> Task<span class="token punctuation">.</span><span class="token function">FromResult</span><span class="token punctuation">(</span>\n            OperationResult<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token function">CreatePartly</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span>\n                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Data from url \'</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">dataSourcesUrls<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span><span class="token punctuation">}</span></span><span class="token string">\' was not loaded, but it\'s OK, go on"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="csharp"><pre class="language-csharp"><code class="language-csharp"><span class="token comment">// Complex result</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OperationResult<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">></span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token function">OperationResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> Success <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name">TResult</span> Result <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name">Exception</span> Exception <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> IsTotallySuccessful <span class="token operator">=></span> Success <span class="token operator">&amp;&amp;</span> Exception <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// Factories</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">OperationResult<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">></span></span> <span class="token function">CreateSuccessful</span><span class="token punctuation">(</span><span class="token class-name">TResult</span> result<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OperationResult<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">></span></span>\n        <span class="token punctuation">{</span>\n            Success <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n            Result <span class="token operator">=</span> result\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">OperationResult<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">></span></span> <span class="token function">CreatePartly</span><span class="token punctuation">(</span><span class="token class-name">TResult</span> result<span class="token punctuation">,</span> <span class="token class-name">Exception</span> e<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OperationResult<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">></span></span>\n        <span class="token punctuation">{</span>\n            Success <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n            Result <span class="token operator">=</span> result<span class="token punctuation">,</span>\n            Exception <span class="token operator">=</span> e\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">OperationResult<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">></span></span> <span class="token function">CreateFailed</span><span class="token punctuation">(</span><span class="token class-name">TResult</span> result<span class="token punctuation">,</span> <span class="token class-name">Exception</span> e<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OperationResult<span class="token punctuation">&lt;</span>TResult<span class="token punctuation">></span></span>\n        <span class="token punctuation">{</span>\n            Success <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n            Exception <span class="token operator">=</span> e\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="csharp"><pre class="language-csharp"><code class="language-csharp"><span class="token comment">// Consumer of our service</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token class-name"><span class="token keyword">var</span></span> urls <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n        <span class="token punctuation">{</span>\n            <span class="token string">"https://www.maltsev.space/sources/1"</span><span class="token punctuation">,</span>\n            <span class="token string">"https://www.maltsev.space/sources/2"</span><span class="token punctuation">,</span>\n            <span class="token string">"https://www.maltsev.space/sources/3"</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n        <span class="token class-name"><span class="token keyword">var</span></span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AggregationService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name"><span class="token keyword">var</span></span> countResult <span class="token operator">=</span> <span class="token keyword">await</span> service<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span>urls<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>countResult<span class="token punctuation">.</span>IsTotallySuccessful<span class="token punctuation">)</span>\n            Trace<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Total count: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">countResult<span class="token punctuation">.</span>Result</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>countResult<span class="token punctuation">.</span>Success<span class="token punctuation">)</span>\n            Trace<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Count is around: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">countResult<span class="token punctuation">.</span>Result</span><span class="token punctuation">}</span></span><span class="token string">\\nError: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">countResult<span class="token punctuation">.</span>Exception</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">else</span>\n            Trace<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Error: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">countResult<span class="token punctuation">.</span>Exception</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"The main idea is that it is grouping result and errors, so we have full information about result of the operation and may react as we want. In our case we want to show user any result, even if it isn't full."),"\n",e.createElement(s.p,null,"So, as in the example with frequent word, our model of complex result just group everything together. It's useful when we construct complex result via our factory-methods, but then in the consumer we need only its fields."),"\n",e.createElement(s.p,null,"There may be different ways of how we consume these results, for example, we just need requested data, even if it may be equals ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">default</code>'}})," (empty)."),"\n",e.createElement(s.p,null,"So, we can use deconstruction and discards. Firstly, we create ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Deconstruct</code>'}})," with all 4 fields:"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="csharp"><pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Deconstruct</span><span class="token punctuation">(</span><span class="token keyword">out</span> <span class="token class-name">TResult</span> result<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">bool</span></span> success<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">bool</span></span> totalSuccess<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token class-name">Exception</span> exception<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    result <span class="token operator">=</span> Result<span class="token punctuation">;</span>\n    success <span class="token operator">=</span> Success<span class="token punctuation">;</span>\n    totalSuccess <span class="token operator">=</span> IsTotallySuccessful<span class="token punctuation">;</span>\n    exception <span class="token operator">=</span> Exception<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"Then we can deconstruct it as we want:"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="csharp"><pre class="language-csharp"><code class="language-csharp"><span class="token keyword">var</span> <span class="token punctuation">(</span>count<span class="token punctuation">,</span> _<span class="token punctuation">,</span> totalSuccess<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">await</span> service<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span>urls<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ConfigureAwait</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">if</span><span class="token punctuation">(</span>totalSuccess<span class="token punctuation">)</span>\n    Trace<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$"Total count: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">count</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"And that's it, were are ready to go on!"),"\n",e.createElement(s.h2,{id:"further-reading",style:{position:"relative"}},e.createElement(s.a,{href:"#further-reading","aria-label":"further reading permalink",className:"anchor before"},e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Further reading"),"\n",e.createElement(s.ul,null,"\n",e.createElement(s.li,null,e.createElement(s.a,{href:"https://docs.microsoft.com/ru-ru/dotnet/csharp/deconstruct"},"Documentation about deconstruction")),"\n",e.createElement(s.li,null,e.createElement(s.a,{href:"https://blogs.msdn.microsoft.com/seteplia/2017/11/01/dissecting-the-tuples-in-c-7/"},"Some investigation about how new tuples work")),"\n",e.createElement(s.li,null,e.createElement(s.a,{href:"https://www.codeproject.com/Articles/1022462/Error-Handling-in-SOLID-Csharp-NET-The-Operation-R"},"Article about different kinds of error handling, like OperationResult")),"\n"))}var o=function(n){void 0===n&&(n={});const{wrapper:s}=Object.assign({},(0,t.ah)(),n.components);return s?e.createElement(s,n,e.createElement(p,n)):p(n)},c=a(5785),l=a(3147),u=a(6864),r=a(4001),i=a(778),k=a(6753);const d=n=>{let{data:{current:s,next:a,previous:t},children:p}=n;return e.createElement(l.Z,{displayBio:l.x.AfterContent},e.createElement("div",{className:k.nC},e.createElement("span",{className:k.$y},e.createElement("time",null,s.frontmatter.date),e.createElement(i.Z,{tags:(0,c.Z)(s.frontmatter.tags)})),e.createElement("h1",null,null==s?void 0:s.frontmatter.title),e.createElement("div",{className:k.fL},p),e.createElement(u.Z,{prev:null!=t?{link:t.fields.path,title:t.frontmatter.title}:void 0,next:null!=a?{link:a.fields.path,title:a.frontmatter.title}:void 0})))},g=n=>{let{data:s}=n;return e.createElement(r.p,{title:s.current.frontmatter.title})};function m(n){return e.createElement(d,n,e.createElement(o,n))}},3147:function(n,s,a){a.d(s,{x:function(){return u},Z:function(){return r}});var t=a(1883),e=a(7294);a(358);var p=()=>e.createElement("div",{className:"y0ya850"},e.createElement("p",null,"Hi, I'm ",e.createElement("b",null,"Aleksey"),"!"),e.createElement("p",null,"I'm a ",e.createElement("span",{className:"y0ya851"},"Senior Software Engineer")," ","with a focus on distributed and high-load systems. I work with ",e.createElement("b",null,"С#"),","," ",e.createElement("b",null,"Go")," and ",e.createElement("b",null,"Kotlin"),". Check out my"," ",e.createElement("a",{href:"https://www.linkedin.com/in/dev-alexey-maltsev/"},"LinkedIn")," for my latest experience and my"," ",e.createElement("a",{href:"https://github.com/AxelUser"},"GitHub")," for projects.")),o="_15u9v4n2";const c=()=>e.createElement("header",null,e.createElement("nav",{className:"_15u9v4n1"},e.createElement(t.Link,{className:o,to:"/"},"Blog"),e.createElement(t.Link,{className:o,to:"/art"},"Art"))),l=n=>{let{author:s,currentYear:a}=n;return e.createElement("footer",null,e.createElement("small",null,"© ",a," ",s))};let u=function(n){return n[n.BeforeContent=0]="BeforeContent",n[n.AfterContent=1]="AfterContent",n}({});var r=n=>{var s,a,o,r;let{displayBio:i,children:k}=n;const d=(0,t.useStaticQuery)("4125657994");return e.createElement("div",{className:"_15u9v4n0"},e.createElement(c,null),i==u.BeforeContent&&e.createElement(p,null),k,i==u.AfterContent&&e.createElement(p,null),e.createElement(l,{author:(null==d||null===(s=d.site)||void 0===s||null===(a=s.siteMetadata)||void 0===a?void 0:a.author)||"",currentYear:(null==d||null===(o=d.site)||void 0===o||null===(r=o.siteMetadata)||void 0===r?void 0:r.currentYear)||0}))}},6864:function(n,s,a){a.d(s,{Z:function(){return o}});var t=a(1883),e=a(7294);a(358);const p=n=>{let{prefix:s,to:a}=n;return a?e.createElement(t.Link,{to:a.link,className:"u67xr02"},e.createElement("span",{className:"u67xr03"},s),e.createElement("span",{className:"u67xr04"},a.title)):e.createElement(e.Fragment,null)};var o=n=>{let{prev:s,next:a}=n;return e.createElement("nav",{className:"u67xr01"},e.createElement(p,{prefix:"Previous",to:s}),e.createElement(p,{prefix:"Next",to:a}))}},4001:function(n,s,a){a.d(s,{p:function(){return p}});var t=a(1883),e=a(7294);function p(n){var s,a,p,o,c,l;const u=(0,t.useStaticQuery)("834308132"),r=n.title?(null==u||null===(s=u.site)||void 0===s||null===(a=s.siteMetadata)||void 0===a?void 0:a.title)+" | "+n.title:null==u||null===(p=u.site)||void 0===p||null===(o=p.siteMetadata)||void 0===o?void 0:o.title;return e.createElement(e.Fragment,null,e.createElement("title",null,r),e.createElement("meta",{name:"google-site-verification",content:(null==u||null===(c=u.site)||void 0===c||null===(l=c.siteMetadata)||void 0===l?void 0:l.googleSiteVerification)||void 0}))}},778:function(n,s,a){var t=a(7294);s.Z=n=>{let{tags:s}=n;return t.createElement(t.Fragment,null,s.map((n=>t.createElement("span",null,"[",n,"]"))))}},1151:function(n,s,a){a.d(s,{ah:function(){return p}});var t=a(7294);const e=t.createContext({});function p(n){const s=t.useContext(e);return t.useMemo((()=>"function"==typeof n?n(s):{...s,...n}),[s,n])}}}]);
//# sourceMappingURL=component---src-templates-blog-post-tsx-content-file-path-content-blog-004-deconstructors-index-md-2723b9c121b1f21a9384.js.map