"use strict";(self.webpackChunkmaltsev_space=self.webpackChunkmaltsev_space||[]).push([[378],{6753:function(n,a,s){s.d(a,{nC:function(){return e},$y:function(){return t},fL:function(){return p}});s(358);var e="_14sfvu70",t="_14sfvu72",p="_14sfvu71"},3237:function(n,a,s){s.r(a),s.d(a,{Head:function(){return d},default:function(){return f}});var e=s(1151),t=s(7294);function p(n){const a=Object.assign({p:"p",span:"span",a:"a"},(0,e.ah)(),n.components);return t.createElement(t.Fragment,null,t.createElement(a.p,null,"If you want easily increment your flags in ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Enum</code>'}}),", you can represent it's values with bitwise shift operator:"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="csharp"><pre class="language-csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Flags</span></span><span class="token punctuation">]</span>\n<span class="token keyword">enum</span> <span class="token class-name">ProgrammingLanguages</span>\n<span class="token punctuation">{</span>\n    None        <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    C           <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    Cpp         <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    VisualBasic <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">,</span>\n    VisualCpp   <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">,</span>\n    Rust        <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">,</span>\n    CSharp      <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">,</span>\n    Java        <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">,</span>\n    Php         <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">7</span><span class="token punctuation">,</span>\n    Go          <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">,</span>\n    Rust        <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">9</span><span class="token punctuation">,</span>\n    Scala       <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">,</span>\n    Clojure     <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">11</span><span class="token punctuation">,</span>\n    FSharp      <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">,</span>\n    DotNetFamily <span class="token operator">=</span> VisualBasic <span class="token operator">|</span> VisualCpp <span class="token operator">|</span> CSharp<span class="token punctuation">,</span>\n    JvmFamily <span class="token operator">=</span> Java <span class="token operator">|</span> Scala <span class="token operator">|</span> Clojure\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,'Performance is equal, cause in code all enums translated into underlying numbers by compiler itself, so no runtime overhead. Seems a little bit more trivial, than multiplying "by hand":'),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="csharp"><pre class="language-csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Flags</span></span><span class="token punctuation">]</span>\n<span class="token keyword">enum</span> <span class="token class-name">ProgrammingLanguages</span>\n<span class="token punctuation">{</span>\n    None        <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    C           <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    Cpp         <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>\n    VisualBasic <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>\n    VisualCpp   <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span>\n    Rust        <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">,</span>\n    CSharp      <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">,</span>\n    Java        <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">,</span>\n    Php         <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">,</span>\n    Go          <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">,</span>\n    Rust        <span class="token operator">=</span> <span class="token number">512</span><span class="token punctuation">,</span>\n    Scala       <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">,</span>\n    Clojure     <span class="token operator">=</span> <span class="token number">2048</span><span class="token punctuation">,</span>\n    FSharp      <span class="token operator">=</span> <span class="token number">4096</span><span class="token punctuation">,</span>\n    DotNetFamily <span class="token operator">=</span> VisualBasic <span class="token operator">|</span> VisualCpp <span class="token operator">|</span> CSharp<span class="token punctuation">,</span>\n    JvmFamily <span class="token operator">=</span> Java <span class="token operator">|</span> Scala <span class="token operator">|</span> Clojure\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"More info about bitwise operators and Enums you can learn from ",t.createElement(a.a,{href:"https://www.alanzucconi.com/2015/07/26/enum-flags-and-bitwise-operators/"},"this post"),"."))}var o=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,e.ah)(),n.components);return a?t.createElement(a,n,t.createElement(p,n)):p(n)},l=s(5785),r=s(3147),c=s(6864),u=s(4001),i=s(778),m=s(6753);const k=n=>{let{data:{current:a,next:s,previous:e},children:p}=n;return t.createElement(r.Z,{displayBio:r.x.AfterContent},t.createElement("div",{className:m.nC},t.createElement("span",{className:m.$y},t.createElement("time",null,a.frontmatter.date),t.createElement(i.Z,{tags:(0,l.Z)(a.frontmatter.tags)})),t.createElement("h1",null,null==a?void 0:a.frontmatter.title),t.createElement("div",{className:m.fL},p),t.createElement(c.Z,{prev:null!=e?{link:e.fields.path,title:e.frontmatter.title}:void 0,next:null!=s?{link:s.fields.path,title:s.frontmatter.title}:void 0})))},d=n=>{let{data:a}=n;return t.createElement(u.p,{title:a.current.frontmatter.title})};function f(n){return t.createElement(k,n,t.createElement(o,n))}},3147:function(n,a,s){s.d(a,{x:function(){return c},Z:function(){return u}});var e=s(1883),t=s(7294);s(358);var p=()=>t.createElement("div",{className:"y0ya850"},t.createElement("p",null,"Hi, I'm ",t.createElement("b",null,"Aleksey"),"!"),t.createElement("p",null,"I'm a ",t.createElement("span",{className:"y0ya851"},"Senior Software Engineer")," ","with a focus on distributed and high-load systems. I work with ",t.createElement("b",null,"С#"),","," ",t.createElement("b",null,"Go")," and ",t.createElement("b",null,"Kotlin"),". Check out my"," ",t.createElement("a",{href:"https://www.linkedin.com/in/dev-alexey-maltsev/"},"LinkedIn")," for my latest experience and my"," ",t.createElement("a",{href:"https://github.com/AxelUser"},"GitHub")," for projects.")),o="_15u9v4n2";const l=()=>t.createElement("header",null,t.createElement("nav",{className:"_15u9v4n1"},t.createElement(e.Link,{className:o,to:"/"},"Blog"),t.createElement(e.Link,{className:o,to:"/art"},"Art"))),r=n=>{let{author:a,currentYear:s}=n;return t.createElement("footer",null,t.createElement("small",null,"© ",s," ",a))};let c=function(n){return n[n.BeforeContent=0]="BeforeContent",n[n.AfterContent=1]="AfterContent",n}({});var u=n=>{var a,s,o,u;let{displayBio:i,children:m}=n;const k=(0,e.useStaticQuery)("4125657994");return t.createElement("div",{className:"_15u9v4n0"},t.createElement(l,null),i==c.BeforeContent&&t.createElement(p,null),m,i==c.AfterContent&&t.createElement(p,null),t.createElement(r,{author:(null==k||null===(a=k.site)||void 0===a||null===(s=a.siteMetadata)||void 0===s?void 0:s.author)||"",currentYear:(null==k||null===(o=k.site)||void 0===o||null===(u=o.siteMetadata)||void 0===u?void 0:u.currentYear)||0}))}},6864:function(n,a,s){s.d(a,{Z:function(){return o}});var e=s(1883),t=s(7294);s(358);const p=n=>{let{prefix:a,to:s}=n;return s?t.createElement(e.Link,{to:s.link,className:"u67xr02"},t.createElement("span",{className:"u67xr03"},a),t.createElement("span",{className:"u67xr04"},s.title)):t.createElement(t.Fragment,null)};var o=n=>{let{prev:a,next:s}=n;return t.createElement("nav",{className:"u67xr01"},t.createElement(p,{prefix:"Previous",to:a}),t.createElement(p,{prefix:"Next",to:s}))}},4001:function(n,a,s){s.d(a,{p:function(){return p}});var e=s(1883),t=s(7294);function p(n){var a,s,p,o,l,r;const c=(0,e.useStaticQuery)("834308132"),u=n.title?(null==c||null===(a=c.site)||void 0===a||null===(s=a.siteMetadata)||void 0===s?void 0:s.title)+" | "+n.title:null==c||null===(p=c.site)||void 0===p||null===(o=p.siteMetadata)||void 0===o?void 0:o.title;return t.createElement(t.Fragment,null,t.createElement("title",null,u),t.createElement("meta",{name:"google-site-verification",content:(null==c||null===(l=c.site)||void 0===l||null===(r=l.siteMetadata)||void 0===r?void 0:r.googleSiteVerification)||void 0}))}},778:function(n,a,s){var e=s(7294);a.Z=n=>{let{tags:a}=n;return e.createElement(e.Fragment,null,a.map((n=>e.createElement("span",null,"[",n,"]"))))}},1151:function(n,a,s){s.d(a,{ah:function(){return p}});var e=s(7294);const t=e.createContext({});function p(n){const a=e.useContext(t);return e.useMemo((()=>"function"==typeof n?n(a):{...a,...n}),[a,n])}}}]);
//# sourceMappingURL=component---src-templates-blog-post-tsx-content-file-path-content-blog-001-binary-shifts-for-flags-index-md-822aa4a1f633af9443ca.js.map